name: ci
on:
  push:
    branches:
    - '**'
    tags-ignore:
    - '*.*'  # We don't want this to run on release
env:
  BUILD_DIR: ./build
  GO_VERSION: 1.12
  AWS_REGION: 'ap-southeast-2'
  GCP_REGION: 'australia-southeast1'
  TEAM_NAME: 'ICE'
  APP_NAME: 'network'
  PROJECT: 'ofx-infrastructure'
  AWS_ROLE: 'arn:aws:iam::368940151251:role/core-pipeline'
  
jobs:
  config:
    runs-on: ubuntu-latest 
    steps:
    - name: Checkout
      uses: actions/checkout@v2

    - uses: actions/setup-node@v1
      with:
        node-version: '12.x'
        registry-url: https://npm.pkg.github.com/
        scope: '@ofx-com'

    - run: npm install
      env:
        NODE_AUTH_TOKEN: ${{ secrets.PACKAGE_TOKEN }}

    - name: Configure environment variables
      uses: ./node_modules/@ofx-com/github-action-configuration
      
  publish:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v2
    - uses: actions/setup-node@v1
      with:
        node-version: '12.x'
        registry-url: https://npm.pkg.github.com/
        scope: '@ofx-com'
    - run: npm install
      env:
        NODE_AUTH_TOKEN: ${{ secrets.PACKAGE_TOKEN }}
    - name: Configure environment variables
      uses: ./node_modules/@ofx-com/github-action-configuration

  deploy:
    runs-on: ubuntu-latest
    needs: [publish]
    env:
      TF_ACTIONS_VERSION: 0.12.24
    steps:
    - name: Checkout
      uses: actions/checkout@v2
    - uses: actions/setup-node@v1
      with:
        node-version: '12.x'
        registry-url: https://npm.pkg.github.com/
        scope: '@ofx-com'
    - run: npm install
      env:
        NODE_AUTH_TOKEN: ${{ secrets.PACKAGE_TOKEN }}

    - name: Configure environment variables
      uses: ./node_modules/@ofx-com/github-action-configuration

    - name: 'Configure AWS Credentials'
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{env.AWS_REGION}}
        role-to-assume: ${{env.AWS_ROLE}}
        role-duration-seconds: 3600
        export_default_credentials: true

    - name: 'Configure GCP Credentials'
      uses: GoogleCloudPlatform/github-actions/setup-gcloud@master
      with:
        service_account_key: ${{ secrets.GCP_CREDENTIALS }}
        project-id: ${{ env.PROJECT }}
        export_default_credentials: true
        disable_dependent_services: true

    - name: 'Terraform Format'
      uses: hashicorp/terraform-github-actions@v0.8.0
      with:
        tf_actions_version: ${{ env.TF_ACTIONS_VERSION }}
        tf_actions_subcommand: 'fmt'
        tf_actions_working_dir: ${{ env.BUILD_DIR }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: 'Terraform Init'
      uses: hashicorp/terraform-github-actions@v0.8.0
      with:
        tf_actions_version: ${{ env.TF_ACTIONS_VERSION }}
        tf_actions_subcommand: 'init'
        tf_actions_working_dir: ${{ env.BUILD_DIR }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: 'Terraform Validate'
      uses: hashicorp/terraform-github-actions@v0.8.0
      with:
        tf_actions_version: ${{ env.TF_ACTIONS_VERSION }}
        tf_actions_subcommand: 'validate'
        tf_actions_working_dir: ${{ env.BUILD_DIR }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: 'Terraform Plan'
      uses: hashicorp/terraform-github-actions@v0.8.0
      with:
        tf_actions_version: ${{ env.TF_ACTIONS_VERSION }}
        tf_actions_subcommand: 'plan'
        tf_actions_working_dir: ${{ env.BUILD_DIR }}
        args: -out="./apply-plan"
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: 'Terraform Apply'
      uses: hashicorp/terraform-github-actions@v0.8.0
      with:
        tf_actions_version: ${{ env.TF_ACTIONS_VERSION }}
        tf_actions_subcommand: 'apply'
        tf_actions_working_dir: ${{ env.BUILD_DIR }}
        args: "./apply-plan"
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}